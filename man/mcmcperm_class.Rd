% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmcpermind.R, R/mcmcpermindhier.R,
%   R/mcmcpermindpost.R
\docType{class}
\name{mcmcpermind-class}
\alias{mcmcpermind-class}
\alias{.mcmcpermind}
\alias{mcmcpermindhier-class}
\alias{.mcmcpermindhier}
\alias{mcmcpermindpost-class}
\alias{.mcmcpermindpost}
\title{Finmix \code{mcmcpermind} class}
\description{
This class defines objects to store the outputs from permuting the MCMC
samples. Due to label switching the sampled component parameters are usually
not assigned to the same component in each iteration. To overcome this issue
the samples are permuted by using a relabeling algorithm (usually K-means)
to reassign parameters. Note that due to assignment of parameters from the
same iteration to the same component, the sample size could shrink.

This class stores the permuted parameters together with the new MCMC sample
size and the mixture log-likelihood, the prior log-likelihood, and the
complete data posterior log-likelihood. All this slots are inherited from
the parent class \code{mcmcpermfix}. In addition to these slots this class adds
permuted weights, permuted indicators as well as the entropies and number
of assigned observations per component.

This class defines objects to store the outputs from permuting the MCMC
samples. Due to label switching the sampled component parameters are usually
not assigned to the same component in each iteration. To overcome this issue
the samples are permuted by using a relabeling algorithm (usually K-means)
to reassign parameters. Note that due to assignment of parameters from the
same iteration to the same component, the sample size could shrink.

This class is supplementing the parent class by adding a slot to store the
permuted parameter samples of the hierarchical prior.

Note that for models with fixed indicators \code{weight}s do not get permuted.

This class defines objects to store the outputs from permuting the MCMC
samples. Due to label switching the sampled component parameters are usually
not assigned to the same component in each iteration. To overcome this issue
the samples are permuted by using a relabeling algorithm (usually K-means)
to reassign parameters. Note that due to assignment of parameters from the
same iteration to the same component, the sample size could shrink.

This class is supplementing the parent class by adding a slot to store the
permuted parameter samples of the posterior densities.
}
\section{Functions}{
\itemize{
\item \code{mcmcpermind-class}: 

\item \code{mcmcpermindhier-class}: 

\item \code{mcmcpermindpost-class}: 
}}

\section{Slots}{

\describe{
\item{\code{relabel}}{A character defining the used algorithm for relabeling.}

\item{\code{weightperm}}{An array of dimension \verb{Mperm x K} containing the
relabeled weight parameters.}

\item{\code{entropyperm}}{An \code{array} of dimension \verb{Mperm x 1} containing the
entropy for each MCMC permuted draw.}

\item{\code{STperm}}{An \code{array} of dimension \verb{Mperm x 1} containing all permuted
MCMC states, for the last observation in slot \verb{@y} of the \code{fdata} object
passed in to \code{\link[=mixturemcmc]{mixturemcmc()}} where a state is defined for non-Markov
models as the last indicator of this observation.}

\item{\code{Sperm}}{An \code{array} of dimension \verb{N x storeS} containing the last
\code{storeS} permuted indicators. \code{storeS} is defined in the slot \verb{@storeS}
of the \code{mcmc} object passed into \code{\link[=mixturemcmc]{mixturemcmc()}}.}

\item{\code{NKperm}}{An \code{array} of dimension \verb{Mperm x K} containing the numbers
of observations assigned to each component.}

\item{\code{hyperperm}}{A named list containing the (permuted) parameters of the
hierarchical prior.}

\item{\code{postperm}}{A named list containing a named list \code{par} with array(s) of
parameters from the posterior density.}
}}

\seealso{
\itemize{
\item \code{\link[=mcmcpermute]{mcmcpermute()}} for the calling function
\item \link[=mcmcperm_class]{mcmcperfix} for the corresponding class for models with
fixed indicators
}

\itemize{
\item \code{\link{mcmcpermute()}} for the calling function
\item \code{\link{mcmcpermind}} for the parent class definition
\item \code{\link{mcmcpermfixhier}} for the corresponding class for models with
fixed indicators
}

\itemize{
\item \code{\link[=mcmcpermute]{mcmcpermute()}} for the calling function
\item \link[=mcmcperm_class]{mcmcpermind} for the parent class definition
\item \link[=mcmcperm_class]{mcmcpermfixpost} for the corresponding class for models
with fixed indicators
}
}
